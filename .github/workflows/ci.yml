name: ci

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

env:
  PACKAGE_VERSION: "1.13.1"
  PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6"

jobs:
  revbot:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - id: revbot
        run: |
          for i in [0..100] ; do \
            new_tag="v${{ env.PACKAGE_VERSION }}+rev${i}" ; \
            git show-ref --tags ${new_tag} --quiet || break ; \
          done
          echo "::set-output name=new_tag::${new_tag}"

      - uses: rickstaa/action-create-tag@v1
        if: github.event_name != 'pull_request'
        with:
          tag: "${{ steps.revbot.outputs.new_tag }}"

  docker-meta:
    runs-on: ubuntu-20.04
    needs: revbot

    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - uses: actions/checkout@v2

      - id: meta
        uses: docker/metadata-action@v3
        with:
          images: docker.io/${{ github.repository }},ghcr.io/${{ github.repository }}

  build:
    runs-on: ubuntu-20.04
    needs: docker-meta

    steps:
      - name: Free disk space
        run: |
          df --human-readable
          sudo apt clean
          docker rmi $(docker image ls --all --quiet) || true
          rm -rf "${AGENT_TOOLSDIRECTORY}"
          df --human-readable

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v1

      - uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - uses: docker/build-push-action@v2
        with:
          platforms: ${{ env.PLATFORMS }}
          labels: ${{ needs.docker-meta.outputs.labels }}
          tags: ${{ needs.docker-meta.outputs.tags }}
          cache-from: ${{ needs.docker-meta.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          outputs: type=oci,dest=/tmp/oci.tar

      - uses: peter-evans/dockerhub-description@v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ github.repository }}

      - uses: actions/upload-artifact@v2
        with:
          name: oci
          path: /tmp/oci.tar

  test:
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        PLATFORM: [linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6]

    steps:
      - uses: docker/setup-qemu-action@v1

      - uses: actions/download-artifact@v2
        with:
          name: oci
          path: /tmp

      - name: Load ${{ matrix.PLATFORM }} manifest
        run: |
          skopeo \
            --override-os "$(echo ${{ matrix.PLATFORM }} | awk -F '/' '{print $1}')" \
            --override-arch "$(echo ${{ matrix.PLATFORM }} | awk -F '/' '{print $2}')" \
            --override-variant "$(echo ${{ matrix.PLATFORM }} | awk -F '/' '{print $3}')" \
            copy "oci-archive:/tmp/oci.tar" "docker-daemon:${{ github.repository }}:latest"

      - name: Test ${{ matrix.PLATFORM }}
        run: |
          docker run ${{ github.repository }} -v | tee /dev/stderr | grep -q ${{ env.PACKAGE_VERSION }}
          docker run -d --name sut ${{ github.repository }}
          docker exec sut dig sigok.verteiltesysteme.net @127.0.0.1 +dnssec | tee /dev/stderr | grep -q NOERROR || { docker logs sut ; exit 1 ; }
          docker exec sut dig sigfail.verteiltesysteme.net @127.0.0.1 +dnssec | tee /dev/stderr | grep -q SERVFAIL || { docker logs sut ; exit 1 ; }
          docker logs sut
          docker rm -f sut
